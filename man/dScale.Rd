% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dScale.R
\name{dScale}
\alias{dScale}
\title{Scaling of a vector or a dataframe.}
\usage{
dScale(x, control, scale = c(0.001, 0.999), robustVarScale = TRUE,
  center = "peak", truncate = FALSE, multiplicationFactor = 1,
  multiCore = FALSE)
}
\arguments{
\item{x}{A numeric/integer vector or dataframe}

\item{control}{A numeric/integer vector or dataframe of values that could be used to define the range. If no control data is present, the function defaults to using the indata as control data.}

\item{scale}{If scaling should be performed. Two possible values: FALSE or a vector with two values indicating the low and high threshold quantiles for the scaling. "c(0.001, 0.999)" is default}

\item{robustVarScale}{If the data should be scaled to its standard deviation within the quantiles defined by the scale values above. If TRUE (the default), the data is unit variance scaled based on the standard deviation of the data within the range defined by scale.}

\item{center}{If centering should be performed. Alternatives are "mean", "peak" and FALSE. "peak" results in centering around the highest peak in the data, which is useful in most cytometry situations, the reason it is default. "mean" results in mean centering.}

\item{truncate}{If truncation of the most extreme values should be performed. Three possible values: TRUE, FALSE, and a vector with two values indicating the low and high threshold quantiles for truncation.}

\item{multiplicationFactor}{A value that all values will be multiplied with. Useful e.g. if the results preferrably should be returned as percent. Defaults to FALSE.}

\item{multiCore}{If the algorithm should be performed on multiple cores. This increases speed in situations when very large datasets (eg >1 000 000 rows) are scaled. With smaller datasets, it works, but is slow. Defaults to FALSE.}
}
\value{
A vector or dataframe with the same size but where all values in the vector or column of the dataframe have been internally scaled.
}
\description{
This is a scaling function with a number of alternatives. This method for scaling takes the shape of the data into somewhat more of a consideration than minMaxScale does, but still gives less influence of outliers than more conventional scalin alternatives, such as unit variance scaling.
}
\examples{
#Generate a default size dataframe with bimodally distributed data
x <- generateBimodalData()

#Retrieve the first column
x2 <- x[,2]

#The maximum and minimum values are
max(x2)
min(x2)

#Run the function without mean centering and with the quantiles set to 0 and 1.
y2 <- dScale(x2, scale=c(0,1), robustVarScale=FALSE, center=FALSE)

#And the data has been scaled to the range between 0 and 1.
max(y2)
min(y2)

#Now run the default function for a dataframe
summary(x[,2:ncol(x)])

y_df <- dScale(x[,2:ncol(x)])

#Here, the data has first been truncated to the default percentiles, then scaled 
#to the standard deviation in the remaining interval and finally the center has been
#placed where the highest peak in the data is present. NB! Here, no truncation has been performed in the scaling, only to obtain the scaling values.
summary(y_df)
}
