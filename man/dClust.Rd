% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dClust.R
\name{dClust}
\alias{dClust}
\title{Performing optimization and penalized K-means clustering}
\usage{
dClust(inDataFrameScaled, dualClustSetup, penalties = c(0, 2, 4, 8, 16, 32,
  64, 128), sampleSizes = "default", selectionSampleSize = "default",
  k = 30, minCRIImprovement = 0.01, maxCRI = 0.05, maxIter = 28, ids)
}
\arguments{
\item{inDataFrameScaled}{A dataframe with the data that will be used to create the clustering. The data in this dataframe should be scaled in a proper way. Empirically, many datasets seem to be clustered in a meaningful way if they are scaled with the dScale function.}

\item{dualClustSetup}{A dataframe with two columns: the first specifying which step (1 or 2) the variable should be included in, the second specifying the column name for the variable in question. Iit is used if a two-step clustering should be performed, eg in the case where phenotypic clustering should be performed, followed by clustering on functional variables.}

\item{penalties}{This argument decides whether a single penalty will be used for clustering, or if multiple penalties will be evaluated to identify the optimal one. The suggested default values are empirically defined and might not be optimal for a specific dataset, but the algorithm will warn if the most optimal values are on the borders of the range. Note that when this offset is 0, there is no penalization, which means that the algorithm runs normal K-means clustering.}

\item{sampleSizes}{This controls what fraction of the dataset that will be used to run the penalty optimization. A single value or a vector of values are accepted. "default" results in the full file in files up to 10000 events. From larger files, a sample of 10000 random rows is used. A user specified number is accepted.}

\item{selectionSampleSize}{The size of the dataset used to find the optimal solution out of the many generated by the penalty optimization at each sample size. "default" results in the full file in files up to 10000 events. From larger files, a sample of 10000 random rows is used. A user specified number is accepted.}

\item{k}{Number of initial cluster centers. The higher the number, the greater the precision of the clustering, but the computing time is also increased with the number of starting points. Default is 30. If penalties=0, k-means clustering with k clusters will be performed.}

\item{minCRIImprovement}{This is the stop criterion for the penalty optimization algorithm: the more iterations that are run, the smaller will the improvement of the corrected Rand index be, and this sets the threshold when the inner iterations stop. Defaults to 0.01, or 1 percent.}

\item{maxCRI}{This is the stop criterion for the iterative optimization of the sample size: the maximum corrected Rand index that is acceptable. Defaults to 0.05, or 5 percent difference between sets of two full dataset allocations based on clusterings of a certain sample size.}

\item{maxIter}{The maximal number of iterations that are performed in the penalty optimization.}

\item{ids}{Optionally, a vector of the same length as rows in the inDataFrameScaled can be included. If so, it is used to generate a final analysis, where a table of the fraction of observations for each individual and each cluster is created.}
}
\value{
A nested list with varying components depending on the setup above. In the case of a dualClustSetup, the result will be a nested list of lists, where each sublist contains all components described below:
\describe{
   \item{clusterVector}{A vector with the same length as number of rows in the inDataFrameUsed, where the cluster identity of each observation is noted.}
   \item{clusterCenters}{A matrix containing information about where the centers are in all the variables that contributed to creating the cluster with the given penalty term. Is used by dAllocate.}
   \item{penaltyOptList}{A list of two dataframes:
   \describe{
             \item{penaltyOpt.df}{A one row dataframe with the settings for the optimal penalty.}
             \item{meanOptimDf}{A dataframe with the information about the results with all tested penalty values.}
           }
    }
    \item{sampleSizeOptList}{This is only included if multiple sample sizes are run. It is a dataframe, in which each row represents one sample size, and in which the last row is thus the chosen, optimal sample size. It has the following columns:
    \describe{
              \item{SampleSize}{This column shows the sample size of each boot strap subsampling in the optimization procedure.}
              \item{Lowest distance}{This vector shows the optimal stability, expressed as the lowest distance between the bootstrap subsampling runs at each of the boot strap subsamling sizes.}
              \item{Improvement}{Here, the improvement, expressed as a fraction between 0 and 1 is shown. When the improvement is less than minCRIImprovement, the algorithm automatically stops.}
             } 
    }
    \item{idClusterFractions}{If a valid ids vector is included, this dataframe is returned that contains the what fraction of each id that is present in each cluster. Calculated on a per id basis.}
}
}
\description{
This function is a user-friendly wrapper integrating the dOpt and dClust functions. It only requires a dataset and an id vector. It starts by doing all necessary optimizations, both on the smallest sample size that is needed to perform the most stable clustering, and to identify the optimal penalty. It then performs clustering based on the values identified in the optimization step.
}
\examples{
#Generate a default size dataframe with bimodally distributed data
x <- generateBimodalData(samplings=2, dataCols=12)

#Scale this datamframe
x_scaled <- dScale(x[,2:ncol(x)])

#Set a reasonable working directory, e.g.
setwd("~/Desktop")

#First, just run with the standard settings
xClustObject <- dClust(x_scaled, sampleSizes=500, maxIter=20)

#Look at the result
str(xClustObject)

#Now, a dual cluster setup is attempted
xClustObject <- dClust(x_scaled, dualClustSetup=data.frame(rep(1:2, each=6), colnames(x_scaled)), penalties=c(64, 128), sampleSizes=500, selectionSampleSize=500, maxIter=20, ids=x[,1])

#Look at the result
str(xClustObject)

}
\seealso{
\code{\link{dAllocate}}
}
